// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package blp

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonA8a797f8DecodeGoMysqlKafkaBinlogPayload(in *jlexer.Lexer, out *CanalPayload) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int64(in.Int64())
		case "database":
			out.Db = string(in.String())
		case "table":
			out.Table = string(in.String())
		case "pkNames":
			if in.IsNull() {
				in.Skip()
				out.PKColumn = nil
			} else {
				in.Delim('[')
				if out.PKColumn == nil {
					if !in.IsDelim(']') {
						out.PKColumn = make([]string, 0, 4)
					} else {
						out.PKColumn = []string{}
					}
				} else {
					out.PKColumn = (out.PKColumn)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.PKColumn = append(out.PKColumn, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "isDdl":
			out.IsDdl = bool(in.Bool())
		case "type":
			out.EventType = string(in.String())
		case "es":
			out.Es = int64(in.Int64())
		case "ts":
			out.Ts = int64(in.Int64())
		case "sql":
			out.Sql = string(in.String())
		case "mysqlType":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.MysqlType = make(map[string]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v2 string
					v2 = string(in.String())
					(out.MysqlType)[key] = v2
					in.WantComma()
				}
				in.Delim('}')
			}
		case "sqlType":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.SqlType = make(map[string]int16)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v3 int16
					v3 = int16(in.Int16())
					(out.SqlType)[key] = v3
					in.WantComma()
				}
				in.Delim('}')
			}
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Rows = nil
			} else {
				in.Delim('[')
				if out.Rows == nil {
					if !in.IsDelim(']') {
						out.Rows = make([]map[string]interface{}, 0, 8)
					} else {
						out.Rows = []map[string]interface{}{}
					}
				} else {
					out.Rows = (out.Rows)[:0]
				}
				for !in.IsDelim(']') {
					var v4 map[string]interface{}
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('{')
						v4 = make(map[string]interface{})
						for !in.IsDelim('}') {
							key := string(in.String())
							in.WantColon()
							var v5 interface{}
							if m, ok := v5.(easyjson.Unmarshaler); ok {
								m.UnmarshalEasyJSON(in)
							} else if m, ok := v5.(json.Unmarshaler); ok {
								_ = m.UnmarshalJSON(in.Raw())
							} else {
								v5 = in.Interface()
							}
							(v4)[key] = v5
							in.WantComma()
						}
						in.Delim('}')
					}
					out.Rows = append(out.Rows, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "old":
			if in.IsNull() {
				in.Skip()
				out.Olds = nil
			} else {
				in.Delim('[')
				if out.Olds == nil {
					if !in.IsDelim(']') {
						out.Olds = make([]map[string]interface{}, 0, 8)
					} else {
						out.Olds = []map[string]interface{}{}
					}
				} else {
					out.Olds = (out.Olds)[:0]
				}
				for !in.IsDelim(']') {
					var v6 map[string]interface{}
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('{')
						v6 = make(map[string]interface{})
						for !in.IsDelim('}') {
							key := string(in.String())
							in.WantColon()
							var v7 interface{}
							if m, ok := v7.(easyjson.Unmarshaler); ok {
								m.UnmarshalEasyJSON(in)
							} else if m, ok := v7.(json.Unmarshaler); ok {
								_ = m.UnmarshalJSON(in.Raw())
							} else {
								v7 = in.Interface()
							}
							(v6)[key] = v7
							in.WantComma()
						}
						in.Delim('}')
					}
					out.Olds = append(out.Olds, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA8a797f8EncodeGoMysqlKafkaBinlogPayload(out *jwriter.Writer, in CanalPayload) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.Id))
	}
	{
		const prefix string = ",\"database\":"
		out.RawString(prefix)
		out.String(string(in.Db))
	}
	{
		const prefix string = ",\"table\":"
		out.RawString(prefix)
		out.String(string(in.Table))
	}
	{
		const prefix string = ",\"pkNames\":"
		out.RawString(prefix)
		if in.PKColumn == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.PKColumn {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.String(string(v9))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"isDdl\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsDdl))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.EventType))
	}
	{
		const prefix string = ",\"es\":"
		out.RawString(prefix)
		out.Int64(int64(in.Es))
	}
	{
		const prefix string = ",\"ts\":"
		out.RawString(prefix)
		out.Int64(int64(in.Ts))
	}
	{
		const prefix string = ",\"sql\":"
		out.RawString(prefix)
		out.String(string(in.Sql))
	}
	{
		const prefix string = ",\"mysqlType\":"
		out.RawString(prefix)
		if in.MysqlType == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v10First := true
			for v10Name, v10Value := range in.MysqlType {
				if v10First {
					v10First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v10Name))
				out.RawByte(':')
				out.String(string(v10Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"sqlType\":"
		out.RawString(prefix)
		if in.SqlType == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v11First := true
			for v11Name, v11Value := range in.SqlType {
				if v11First {
					v11First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v11Name))
				out.RawByte(':')
				out.Int16(int16(v11Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		if in.Rows == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v12, v13 := range in.Rows {
				if v12 > 0 {
					out.RawByte(',')
				}
				if v13 == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
					out.RawString(`null`)
				} else {
					out.RawByte('{')
					v14First := true
					for v14Name, v14Value := range v13 {
						if v14First {
							v14First = false
						} else {
							out.RawByte(',')
						}
						out.String(string(v14Name))
						out.RawByte(':')
						if m, ok := v14Value.(easyjson.Marshaler); ok {
							m.MarshalEasyJSON(out)
						} else if m, ok := v14Value.(json.Marshaler); ok {
							out.Raw(m.MarshalJSON())
						} else {
							out.Raw(json.Marshal(v14Value))
						}
					}
					out.RawByte('}')
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"old\":"
		out.RawString(prefix)
		if in.Olds == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v15, v16 := range in.Olds {
				if v15 > 0 {
					out.RawByte(',')
				}
				if v16 == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
					out.RawString(`null`)
				} else {
					out.RawByte('{')
					v17First := true
					for v17Name, v17Value := range v16 {
						if v17First {
							v17First = false
						} else {
							out.RawByte(',')
						}
						out.String(string(v17Name))
						out.RawByte(':')
						if m, ok := v17Value.(easyjson.Marshaler); ok {
							m.MarshalEasyJSON(out)
						} else if m, ok := v17Value.(json.Marshaler); ok {
							out.Raw(m.MarshalJSON())
						} else {
							out.Raw(json.Marshal(v17Value))
						}
					}
					out.RawByte('}')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CanalPayload) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA8a797f8EncodeGoMysqlKafkaBinlogPayload(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CanalPayload) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA8a797f8EncodeGoMysqlKafkaBinlogPayload(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CanalPayload) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA8a797f8DecodeGoMysqlKafkaBinlogPayload(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CanalPayload) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA8a797f8DecodeGoMysqlKafkaBinlogPayload(l, v)
}
